# Configuracion de Bootstrap - Se carga ANTES que application.properties
# Usado para configurar el cliente de Config Server y encontrar el Servidor Eureka

# === Nombre de la Aplicacion (Config Server lo usa para encontrar su configuracion) ===
# Este nombre DEBE coincidir con el nombre del archivo .properties en tu repo de GitHub (ej: usuarios-servicio.properties)
spring.application.name=usuarios-servicio

# === Configuracion para Descubrir el Config Server via Eureka ===
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.service-id=config-server # El ID de servicio del Config Server en Eureka (su spring.application.name)

# === Configuracion Minimal de Eureka Client en Bootstrap ===
# Necesitas esta configuracion AQUI para que el cliente pueda encontrar a Eureka *antes* de obtener
# su configuracion principal del Config Server.
# Usamos localhost aqui porque al iniciar LOCALMENTE (mvn spring-boot:run), necesita encontrar a Eureka LOCALMENTE primero.
# La configuracion de application.properties (obtenida del Config Server)
# sobrescribira esto DESPUES para usar 'eureka-server:8761' cuando corra en Docker.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# === Configuracion de Spring Config Import ===
# Indica a Spring Cloud donde buscar configuracion (el Config Server via discovery).
# spring.config.import=configserver:
# Nota: Al usar spring.cloud.config.discovery.enabled=true y spring.cloud.config.discovery.service-id=config-server,
# Spring Boot 2.4+ automaticamente maneja el import. No necesitas poner "configserver:" explicitamente aqui en versiones recientes
# si la discovery esta configurada. Sin embargo, si sigues teniendo el error de import, descomentar la linea de arriba
# podria ser necesario en algunas versiones o configuraciones especificas.

# Opcional: Si quieres activar un perfil (ej: local) DENTRO del proceso de bootstrapping
# spring.profiles.active=local